classDiagram
    Client --> StudentController: HTTP Request
    StudentController --> StudentService: delegates to
    StudentService <|.. StudentServiceImpl: implements
    StudentServiceImpl --> StudentRepository: uses
    StudentServiceImpl --> StudentMapper: uses for conversion

    StudentController --> StandardResponse: returns
    GlobalExceptionHandler --> StandardResponse: creates error response

    StudentMapper --> Student: converts from
    StudentMapper --> StudentDto: converts to
    StudentRepository --> Student: persists

    StudentServiceImpl --> NotExists: throws
    StudentServiceImpl --> AlreadyExists: throws
    StudentServiceImpl --> StudentIdAndIdMismatch: throws

    class StudentController{
        -studentService: StudentService
        +getAllStudents(): ResponseEntity
        +getStudent(id: Long): ResponseEntity
        +addStudent(studentDto: StudentDto): ResponseEntity
        +updateStudent(studentDto: StudentDto, id: Long): ResponseEntity
        +deleteStudent(id: Long): void
    }

    class StudentService{
        <<interface>>
        +getAllStudents(): List~StudentDto~
        +getStudentById(id: Long): StudentDto
        +addStudent(studentDto: StudentDto): StudentDto
        +updateStudent(studentDto: StudentDto, id: Long): StudentDto
        +deleteStudent(id: Long): void
    }

    class StudentServiceImpl{
        -studentRepository: StudentRepository
        -studentMapper: StudentMapper
        +getAllStudents(): List~StudentDto~
        +getStudentById(id: Long): StudentDto
        +addStudent(studentDto: StudentDto): StudentDto
        +updateStudent(studentDto: StudentDto, id: Long): StudentDto
        +deleteStudent(id: Long): void
    }

    class StudentRepository{
        <<interface>>
        +findAll(): List~Student~
        +findById(id: Long): Optional~Student~
        +findByEmail(email: String): Optional~Student~
        +save(student: Student): Student
        +deleteById(id: Long): void
        +existsById(id: Long): boolean
    }

    class StudentMapper{
        +toEntity(dto: StudentDto): Student
        +toDto(entity: Student): StudentDto
        +updateEntityFromDto(entity: Student, dto: StudentDto): void
    }

    class Student{
        -id: Long
        -firstName: String
        -lastName: String
        -age: double
        -email: String
    }

    class StudentDto{
        -id: Long
        -firstName: String
        -lastName: String
        -age: double
        -email: String
    }

    class StandardResponse{
        -status: String
        -data: Object
        -error: Object
        -timestamp: LocalDateTime
    }

    class GlobalExceptionHandler{
        +handleNotExists(ex: NotExists): ResponseEntity
        +handleAlreadyExists(ex: AlreadyExists): ResponseEntity
        +handleIdMismatch(ex: StudentIdAndIdMismatch): ResponseEntity
        +handleValidationExceptions(ex: MethodArgumentNotValidException): ResponseEntity
        +handleGenericException(ex: Exception): ResponseEntity
    }

    class NotExists{
        +NotExists(message: String)
    }

    class AlreadyExists{
        +AlreadyExists(message: String)
    }

    class StudentIdAndIdMismatch{
        +StudentIdAndIdMismatch(message: String)
    }

    class DataInitializer{
        -studentRepository: StudentRepository
        +run(args: String[]): void
    }

    DataInitializer --> StudentRepository: initializes data via